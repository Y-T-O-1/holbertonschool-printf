.TH man_3_printf "November 6, 2023" "version 1.0"

.SH NAME
_printf

.SH SYNOPSIS
#include "main.h"

Use the function wuth the specifiers (c,s,i,d, etc) after the %. If no identifier is present then the function prints the literal string.

.SH DESCRIPTION

The functions _printf()  produce output according to a
format specified. write the output under the control of a format
string that specifies how subsequent arguments (or arguments accessed
via the variable-length argument facilities).
Format of the format string
The format string is a character string, beginning and ending in its
initial shift state, if any.  The format string is composed of zero
or more directives: ordinary characters (not %), which are copied
unchanged to the output stream; and conversion specifications, each
of which results in fetching zero or more subsequent arguments.  Each
conversion specification is introduced by the character %, and ends
with a conversion specifier.  In between there may be (in this order)
zero or more flags, an optional minimum field width, an optional
precision and an optional length modifier.
Conversion specifiers
A character that specifies the type of conversion to be applied.  The
conversion specifiers and their meanings are:

       d, i   The int argument is converted to signed decimal notation.  The
              precision, if any, gives the minimum number of digits that
              must appear; if the converted value requires fewer digits, it
              is padded on the left with zeros.  The default precision is 1.
              When 0 is printed with an explicit precision 0, the output is
              empty.

       c      If no l modifier is present, the int argument is converted to
              an unsigned char, and the resulting character is written.  If
              an l modifier is present, the wint_t (wide character) argument
              is converted to a multibyte sequence by a call to the
              wcrtomb(3) function, with a conversion state starting in the
              initial state, and the resulting multibyte string is written.

       s      If no l modifier is present: the const char * argument is
              expected to be a pointer to an array of character type
              (pointer to a string).  Characters from the array are written
              up to (but not including) a terminating null byte ('\0'); if a
              precision is specified, no more than the number specified are
              written.  If a precision is given, no null byte need be
              present; if the precision is not specified, or is greater than
              the size of the array, the array must contain a terminating
              null byte.

              If an l modifier is present: the const wchar_t * argument is
              expected to be a pointer to an array of wide characters.  Wide
              characters from the array are converted to multibyte charac‐
              ters (each by a call to the wcrtomb(3) function, with a con‐
              version state starting in the initial state before the first
              wide character), up to and including a terminating null wide
              character.  The resulting multibyte characters are written up
              to (but not including) the terminating null byte.  If a preci‐
              sion is specified, no more bytes than the number specified are
              written, but no partial multibyte characters are written.
              Note that the precision determines the number of bytes writ‐
              ten, not the number of wide characters or screen positions.
              The array must contain a terminating null wide character,
              unless a precision is given and it is so small that the number
              of bytes written exceeds it before the end of the array is
              reached.

       %      A '%' is written.  No argument is converted.  The complete
              conversion specification is '%%'.

.SH RETURN VALUE
Upon successful return, these functions return the number of
characters printed (excluding the null byte used to end output to
strings).
If an output error is encountered, a negative value is returned.

.SH SEE ALSO
printf(3)

.SH BUGS
No known bugs.
.SH AUTHOR

Kyle Headley, Benjamin Carter